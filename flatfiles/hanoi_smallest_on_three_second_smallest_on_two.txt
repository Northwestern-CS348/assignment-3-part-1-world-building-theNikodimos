"""
For a game where there are 5 disks,
write down the Facts and Rules to model the game state where 
disk1 (the smallest) is on peg3
disk2 (the second smallest) is on peg2, and
other disks are on peg1.

        |            |            |
        |            |            |
        |            |            |
        |            |            |
     ---|--- disk3   |            |
    ----|----        |            |
   -----|-----     --|-- disk2   -|- disk1
==========================================
       peg1         peg2         peg3
       
Example: 
fact: (pred obj1 obj2)
rule: ((pred obj1 obj2) (pred obj2 obj3)) -> (pred obj1 obj3)

"""

Game2 = KnowledgeBase()

Game2.kb_assert (fact: (on disk1 peg3))
Game2.kb_assert (fact: (on disk2 peg2))
Game2.kb_assert (fact: (on disk3 peg1))
Game2.kb_assert (fact: (on disk4 peg1))
Game2.kb_assert (fact: (on disk5 peg1))

Game2.kb_assert (fact: (ontop disk3 disk4))
Game2.kb_assert (fact: (ontop disk4 disk5))

Game2.kb_assert (fact: (larger disk5 disk4))
Game2.kb_assert (fact: (larger disk4 disk3))
Game2.kb_assert (fact: (larger disk3 disk2))
Game2.kb_assert (fact: (larger disk2 disk1))

Game2.kb_assert (rule: ((stackable ?d1 ?d2) ~(on ?x ?z) ~(ontop ?b ?x) -> (movable ?x ?y ?z)))
Game2.kb_assert (rule: (~(movable ?x ?y ?y)))
Game2.kb_assert (rule: ( (larger ?x ?y) -> (stackable ?x ?y)))
Game2.kb_assert (rule: ((on ?x ?y) ~(ontop ?z ?x) -> (movable ?x ?y)))

