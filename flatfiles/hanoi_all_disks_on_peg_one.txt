"""
For a game where there are 5 disks,
write down the Facts and Rules to model the game state where 
all disks are on peg1.

        |            |            |
        |            |            |
       -|- disk1     |            |
      --|-- disk2    |            |
     ---|---         |            |
    ----|----        |            |
   -----|----- disk5 |            |
==========================================
       peg1         peg2         peg3
       
Example: 
fact: (pred obj1 obj2)
rule: ((pred obj1 obj2) (pred obj2 obj3)) -> (pred obj1 obj3)

"""

Game1 = KnowledgeBase()

Game1.kb_assert (fact: (on disk5 peg1))
Game1.kb_assert (fact: (on disk4 peg1))
Game1.kb_assert (fact: (on disk3 peg1))
Game1.kb_assert (fact: (on disk2 peg1))
Game1.kb_assert (fact: (on disk1 peg1))

Game1.kb_assert (fact: (ontop disk4 disk5))
Game1.kb_assert (fact: (ontop disk3 disk4))
Game1.kb_assert (fact: (ontop disk2 disk3))
Game1.kb_assert (fact: (ontop disk1 disk2))

Game1.kb_assert (fact: (larger disk5 disk4))
Game1.kb_assert (fact: (larger disk4 disk3))
Game1.kb_assert (fact: (larger disk3 disk2))
Game1.kb_assert (fact: (larger disk2 disk1))

Game1.kb_assert (fact: (empty peg2))
Game1.kb_assert (fact: (empty peg3))

Game1.kb_assert (rule: ((stackable ?d1 ?d2) ~(on ?x ?z) ~(ontop ?b ?x) -> (movable ?x ?y ?z)))
Game1.kb_assert (rule: (~(movable ?x ?y ?y)))
Game1.kb_assert (rule: (~(empty ?z) (larger ?x ?y) -> (stackable ?x ?y)))
Game1.kb_assert (rule: ((empty ?z) -> (movable ?x ?y ?z)))
